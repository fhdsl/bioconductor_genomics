---
title: "Prepdata"
---

Get the original expression data

```{r}
library(SummarizedExperiment)
library(tidySummarizedExperiment)
library(tidyverse)
library(DESeq2)

GSE96870 <- readRDS("data/GSE96870_se.rds")
colnames(GSE96870)
```


```{r}
gsecounts <- assay(GSE96870[GSE96870$time %in% c("Day0", "Day8"),])

```

```{r}

test <- as.data.frame(GSE_results)
test$gene <- rownames(test)

#test_small <- test[sample(nrow(test), size=2000),]
test_small <- read_csv("data/plots/sampled_results.csv")

test_small |>
  ggplot() +
  aes(y=-log2(padj), x=log2FoldChange) +
  geom_point() +
  geom_hline(yintercept = -log2(0.05)) +
  geom_vline(xintercept = -1) +
  geom_vline(xintercept = 1)

positive_candidates <- test_small |>
  filter(padj < 0.05) |>
  filter(log2FoldChange > 1) |>
  slice_sample(n=10)
```
```{r}
library(ggbeeswarm)
make_expression_plot <- function(gene){
  pval <- test_small |>
    filter(gene == gene) |>
    pull(padj)
  
  FC <- test_small |>
    filter(gene == gene) |>
    pull(log2FoldChange)
  
  FC <- 2^FC
  
out_plot <-  GSE96870_normalized |>
    filter(.feature == gene) |>
    filter(time %in% c("Day0", "Day8")) |>
    ggplot() +
  aes(y=counts, x=time) +
   geom_boxplot(aes(fill=time)) +
  geom_beeswarm(cex=5) +
#   facet_wrap(~.feature, scales="free")+
  ggtitle(gene, subtitle = paste0( "p=", signif(pval,digits = 2),  ", FC=", signif(FC, digits=2))) + theme_minimal() +
  theme(legend.position = "none") 

  #out_plot
    ggsave(filename = paste0("data/plots/", gene, ".jpg"),device = jpeg(),units = "px", height=600, width=600)
    dev.off()
}

genes_in_demo <- test_small$gene

small_expression <- GSE96870_normalized |>
  filter(.feature %in% genes_in_demo) |>
    filter(time %in% c("Day0", "Day8"))

small_expression2 <- assay(small_expression) |> as.data.frame()
  
small_expression3 <- small_expression2 |> mutate(.feature=rownames(small_expression2)) |>
  pivot_longer(-c(.feature), names_to = "sample", values_to = "expression")
write_csv(small_expression3, file="explore_expression/small_expression.csv")

covariates <- colData(small_expression) |>
  as.data.frame() |>
  select(geo_accession, time)

make_expression_plot("Glod5")
```

```{r}
library(purrr)

walk(test_small$gene[1:50], make_expression_plot)
```

```{r}
positive_data <- GSE96870_normalized |>
  mutate(count_norm = counts / sizeFactor) |>
  filter(time %in% c("Day0", "Day8")) |>
  filter(.feature %in% positive_candidates$gene) 

positive_plots <- positive_data |>
  filter(.feature != "Col5a3") |>
  ggplot() +
  aes(y=count_norm, x=time) +
   geom_boxplot(aes(fill=time)) +
  geom_point() +
   facet_wrap(~.feature, scales="free")+
  ggtitle("Good Candidates") + theme_minimal()
 
positive_plots
```

```{r}
library(plotly)

test_small2 <- test_small |>
  mutate(log2p = -log2(padj))

plot_small <- test_small |>
  ggplot() +
  aes(y=-log2(padj), x=log2FoldChange) +
  geom_point() +
  geom_hline(yintercept = -log2(0.05)) +
  geom_vline(xintercept = -1) +
  geom_vline(xintercept = 1)

plotly_small <- ggplotly(plot_small)


#plot_ly(data=test_small2,
#        x=~log2FoldChange,
#        y=~log2p,
#        hovertemplate="<img src='data/plots/{gene}.jpg'>") |>
#  add_markers(alpha = 0.2, name = "alpha") #|>
#  layout(shapes=list(
#    hline(log2(0.05)), 
#    vline(1), 
#    vline(-1)
#    )
#  )

#ggplotly(plot_small, tooltip = )
```


```{r}
negative_candidates <- test_small |>
  filter(padj > 0.1) |>
  filter(log2FoldChange > 1) |>
  slice_sample(n = 10)

negative_data <- GSE96870_normalized |>
  mutate(count_norm = counts / sizeFactor) |>
  filter(time %in% c("Day0", "Day8")) |>
  filter(.feature %in% negative_candidates$gene) 

negative_plots <- negative_data |>
  ggplot() +
  aes(y=count_norm, x=time) +
   geom_boxplot(aes(fill=time)) +
  geom_point() +
  facet_wrap(~.feature, scales="free")+
  ggtitle("Bad Candidates") + theme_minimal()
 
(positive_plots + theme(legend.position = "none", axis.text.x = element_text())) + (negative_plots + theme(legend.position = "none"))
```
